{"/home/travis/build/npmtest/node-npmtest-measured/test.js":"/* istanbul instrument in package npmtest_measured */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-measured/lib.npmtest_measured.js":"/* istanbul instrument in package npmtest_measured */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_measured = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_measured = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-measured/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-measured && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_measured */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_measured\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_measured.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_measured.rollup.js'] =\n            local.assetsDict['/assets.npmtest_measured.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_measured.__dirname + '/lib.npmtest_measured.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/index.js":"'use strict';\n\nvar Collection = require('./lib/Collection');\nvar metrics = require('./lib/metrics');\nvar util = require('./lib/util');\n\nvar name;\nfor (name in metrics) {\n  if (metrics.hasOwnProperty(name)) {\n    exports[name] = metrics[name];\n  }\n}\n\nfor (name in util) {\n  if (util.hasOwnProperty(name)) {\n    exports[name] = util[name];\n  }\n}\n\nexports.createCollection = function (name) {\n  return new Collection(name);\n};\n\nexports.Collection = Collection;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/Collection.js":"'use strict';\n\nvar metrics = require('./metrics');\n\nfunction Collection(name) {\n  this.name     = name;\n  this._metrics = {};\n}\n\nCollection.prototype.register = function (name, metric) {\n  this._metrics[name] = metric;\n};\n\nCollection.prototype.toJSON = function () {\n  var json = {};\n\n  var metric;\n  for (metric in this._metrics) {\n    if (this._metrics.hasOwnProperty(metric)) {\n      json[metric] = this._metrics[metric].toJSON();\n    }\n  }\n\n  if (!this.name) {\n    return json;\n  }\n\n  var wrapper = {};\n  wrapper[this.name] = json;\n\n  return wrapper;\n};\n\nCollection.prototype.end = function end() {\n  var metrics = this._metrics;\n  Object.keys(metrics).forEach(function (name) {\n    var metric = metrics[name];\n    if (metric.end) {\n      metric.end();\n    }\n  });\n};\n\nObject\n  .keys(metrics)\n  .forEach(function (name) {\n    var MetricConstructor = metrics[name];\n    var method = name.substr(0, 1).toLowerCase() + name.substr(1);\n\n    Collection.prototype[method] = function (name, properties) {\n      if (!name) {\n        throw new Error('Collection.NoMetricName');\n      }\n\n      if (this._metrics[name]) {\n        return this._metrics[name];\n      }\n\n      var metric = new MetricConstructor(properties);\n      this.register(name, metric);\n      return metric;\n    };\n  });\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/index.js":"'use strict';\n\nexports.Counter   = require('./Counter');\nexports.Gauge     = require('./Gauge');\nexports.Histogram = require('./Histogram');\nexports.Meter     = require('./Meter');\nexports.Timer     = require('./Timer');\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/Counter.js":"'use strict';\n\nfunction Counter(properties) {\n  properties = properties || {};\n\n  this._count = properties.count || 0;\n}\n\nCounter.prototype.toJSON = function () {\n  return this._count;\n};\n\nCounter.prototype.inc = function (n) {\n  this._count += (arguments.length ? n : 1);\n};\n\nCounter.prototype.dec = function (n) {\n  this._count -= (arguments.length ? n : 1);\n};\n\nCounter.prototype.reset = function (count) {\n  this._count = count || 0;\n};\n\nmodule.exports = Counter;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/Gauge.js":"'use strict';\n\nfunction Gauge(readFn) {\n  this._readFn = readFn;\n}\n\n// This is sync for now, but maybe async gauges would be useful as well?\nGauge.prototype.toJSON = function () {\n  return this._readFn();\n};\n\nmodule.exports = Gauge;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/Histogram.js":"'use strict';\n\nvar EDS = require('../util/ExponentiallyDecayingSample');\n\nfunction Histogram(properties) {\n  properties = properties || {};\n\n  this._sample    = properties.sample || new EDS();\n  this._min       = null;\n  this._max       = null;\n  this._count     = 0;\n  this._sum       = 0;\n\n  // These are for the Welford algorithm for calculating running variance\n  // without floating-point doom.\n  this._varianceM = 0;\n  this._varianceS = 0;\n}\n\nHistogram.prototype.update = function (value) {\n  this._count++;\n  this._sum += value;\n\n  this._sample.update(value);\n  this._updateMin(value);\n  this._updateMax(value);\n  this._updateVariance(value);\n};\n\nHistogram.prototype.percentiles = function (percentiles) {\n  var values = this._sample\n    .toArray()\n    .sort(function (a, b) {\n      return (a === b)\n        ? 0\n        : a - b;\n    });\n\n  var results = {};\n\n  var i, percentile, pos, lower, upper;\n  for (i = 0; i < percentiles.length; i++) {\n    percentile = percentiles[i];\n    if (values.length) {\n      pos = percentile * (values.length + 1);\n      if (pos < 1) {\n        results[percentile] = values[0];\n      } else if (pos >= values.length) {\n        results[percentile] = values[values.length - 1];\n      } else {\n        lower = values[Math.floor(pos) - 1];\n        upper = values[Math.ceil(pos) - 1];\n        results[percentile] =\n          lower + (pos - Math.floor(pos)) * (upper - lower);\n      }\n    } else {\n      results[percentile] = null;\n    }\n  }\n\n  return results;\n};\n\nHistogram.prototype.reset = function () {\n  this.constructor();\n};\n\nHistogram.prototype.hasValues = function () {\n  return this._count > 0;\n};\n\nHistogram.prototype.toJSON = function () {\n  var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999]);\n\n  return {\n    min      : this._min,\n    max      : this._max,\n    sum      : this._sum,\n    variance : this._calculateVariance(),\n    mean     : this._calculateMean(),\n    stddev   : this._calculateStddev(),\n    count    : this._count,\n    median   : percentiles[0.5],\n    p75      : percentiles[0.75],\n    p95      : percentiles[0.95],\n    p99      : percentiles[0.99],\n    p999     : percentiles[0.999]\n  };\n};\n\nHistogram.prototype._updateMin = function (value) {\n  if (this._min === null || value < this._min) {\n    this._min = value;\n  }\n};\n\nHistogram.prototype._updateMax = function (value) {\n  if (this._max === null || value > this._max) {\n    this._max = value;\n  }\n};\n\nHistogram.prototype._updateVariance = function (value) {\n  if (this._count === 1) {\n    this._varianceM = value;\n    return value;\n  }\n\n  var oldM = this._varianceM;\n\n  this._varianceM += ((value - oldM) / this._count);\n  this._varianceS += ((value - oldM) * (value - this._varianceM));\n};\n\nHistogram.prototype._calculateMean = function () {\n  return (this._count === 0)\n    ? 0\n    : this._sum / this._count;\n};\n\nHistogram.prototype._calculateVariance = function () {\n  return (this._count <= 1)\n    ? null\n    : this._varianceS / (this._count - 1);\n};\n\nHistogram.prototype._calculateStddev = function () {\n  return (this._count < 1)\n    ? null\n    : Math.sqrt(this._calculateVariance());\n};\n\nmodule.exports = Histogram;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/ExponentiallyDecayingSample.js":"'use strict';\n\nvar BinaryHeap = require('./BinaryHeap');\nvar units      = require('./units');\n\nfunction ExponentiallyDecayingSample(options) {\n  options = options || {};\n\n  this._elements = new BinaryHeap({\n    score: function (element) {\n      return -element.priority;\n    }\n  });\n\n  this._rescaleInterval = options.rescaleInterval\n    || ExponentiallyDecayingSample.RESCALE_INTERVAL;\n  this._alpha           = options.alpha || ExponentiallyDecayingSample.ALPHA;\n  this._size            = options.size || ExponentiallyDecayingSample.SIZE;\n  this._random          = options.random || this._random;\n  this._landmark        = null;\n  this._nextRescale     = null;\n}\n\nExponentiallyDecayingSample.RESCALE_INTERVAL = units.HOURS;\nExponentiallyDecayingSample.ALPHA            = 0.015;\nExponentiallyDecayingSample.SIZE             = 1028;\n\nExponentiallyDecayingSample.prototype.update = function (value, timestamp) {\n  var now = Date.now();\n  if (!this._landmark) {\n    this._landmark    = now;\n    this._nextRescale = this._landmark + this._rescaleInterval;\n  }\n\n  timestamp = timestamp || now;\n\n  var newSize = this._elements.size() + 1;\n\n  var element = {\n    priority: this._priority(timestamp - this._landmark),\n    value: value\n  };\n\n  if (newSize <= this._size) {\n    this._elements.add(element);\n  } else if (element.priority > this._elements.first().priority) {\n    this._elements.removeFirst();\n    this._elements.add(element);\n  }\n\n  if (now >= this._nextRescale) {\n    this._rescale(now);\n  }\n};\n\nExponentiallyDecayingSample.prototype.toSortedArray = function () {\n  return this._elements\n    .toSortedArray()\n    .map(function (element) {\n      return element.value;\n    });\n};\n\n\nExponentiallyDecayingSample.prototype.toArray = function () {\n  return this._elements\n    .toArray()\n    .map(function (element) {\n      return element.value;\n    });\n};\n\nExponentiallyDecayingSample.prototype._weight = function (age) {\n  // We divide by 1000 to not run into huge numbers before reaching a\n  // rescale event.\n  return Math.exp(this._alpha * (age / 1000));\n};\n\nExponentiallyDecayingSample.prototype._priority = function (age) {\n  return this._weight(age) / this._random();\n};\n\nExponentiallyDecayingSample.prototype._random = function () {\n  return Math.random();\n};\n\nExponentiallyDecayingSample.prototype._rescale = function (now) {\n  now               = now || Date.now();\n\n  var self          = this;\n  var oldLandmark   = this._landmark;\n  this._landmark    = now || Date.now();\n  this._nextRescale = now + this._rescaleInterval;\n\n  var factor = self._priority(-(self._landmark - oldLandmark));\n\n  this._elements\n    .toArray()\n    .forEach(function (element) {\n      element.priority *= factor;\n    });\n};\n\nmodule.exports = ExponentiallyDecayingSample;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/BinaryHeap.js":"'use strict';\n\n// Based on http://en.wikipedia.org/wiki/Binary_Heap\n// as well as http://eloquentjavascript.net/appendix2.html\nfunction BinaryHeap(options) {\n  options = options || {};\n\n  this._elements = options.elements || [];\n  this._score    = options.score || this._score;\n}\n\nBinaryHeap.prototype.add = function () {\n  var i, element;\n  for (i = 0; i < arguments.length; i++) {\n    element = arguments[i];\n\n    this._elements.push(element);\n    this._bubble(this._elements.length - 1);\n  }\n};\n\nBinaryHeap.prototype.first = function () {\n  return this._elements[0];\n};\n\nBinaryHeap.prototype.removeFirst = function () {\n  var root = this._elements[0];\n  var last = this._elements.pop();\n\n  if (this._elements.length > 0) {\n    this._elements[0] = last;\n    this._sink(0);\n  }\n\n  return root;\n};\n\nBinaryHeap.prototype.clone = function () {\n  return new BinaryHeap({\n    elements: this.toArray(),\n    score: this._score\n  });\n};\n\nBinaryHeap.prototype.toSortedArray = function () {\n  var array = [];\n  var clone = this.clone();\n  var element;\n\n  while (true) {\n    element = clone.removeFirst();\n    if (element === undefined) {\n      break;\n    }\n\n    array.push(element);\n  }\n\n  return array;\n};\n\nBinaryHeap.prototype.toArray = function () {\n  return [].concat(this._elements);\n};\n\nBinaryHeap.prototype.size = function () {\n  return this._elements.length;\n};\n\nBinaryHeap.prototype._bubble = function (bubbleIndex) {\n  var bubbleElement = this._elements[bubbleIndex];\n  var bubbleScore   = this._score(bubbleElement);\n  var parentIndex;\n  var parentElement;\n  var parentScore;\n\n  while (bubbleIndex > 0) {\n    parentIndex   = this._parentIndex(bubbleIndex);\n    parentElement = this._elements[parentIndex];\n    parentScore   = this._score(parentElement);\n\n    if (bubbleScore <= parentScore) {\n      break;\n    }\n\n    this._elements[parentIndex] = bubbleElement;\n    this._elements[bubbleIndex] = parentElement;\n    bubbleIndex                 = parentIndex;\n  }\n};\n\nBinaryHeap.prototype._sink = function (sinkIndex) {\n  var sinkElement = this._elements[sinkIndex];\n  var sinkScore   = this._score(sinkElement);\n  var length      = this._elements.length;\n  var swapIndex;\n  var swapScore;\n  var swapElement;\n  var childIndexes;\n  var i;\n  var childIndex;\n  var childElement;\n  var childScore;\n\n  while (true) {\n    swapIndex    = null;\n    swapScore    = null;\n    swapElement  = null;\n    childIndexes = this._childIndexes(sinkIndex);\n\n    for (i = 0; i < childIndexes.length; i++) {\n      childIndex = childIndexes[i];\n\n      if (childIndex >= length) {\n        break;\n      }\n\n      childElement = this._elements[childIndex];\n      childScore   = this._score(childElement);\n\n      if (childScore > sinkScore) {\n        if (swapScore === null || swapScore < childScore) {\n          swapIndex   = childIndex;\n          swapScore   = childScore;\n          swapElement = childElement;\n        }\n      }\n    }\n\n    if (swapIndex === null) {\n      break;\n    }\n\n    this._elements[swapIndex] = sinkElement;\n    this._elements[sinkIndex] = swapElement;\n    sinkIndex = swapIndex;\n  }\n};\n\nBinaryHeap.prototype._parentIndex = function (index) {\n  return Math.floor((index - 1) / 2);\n};\n\nBinaryHeap.prototype._childIndexes = function (index) {\n  return [\n    2 * index + 1,\n    2 * index + 2\n  ];\n};\n\nBinaryHeap.prototype._score = function (element) {\n  return element.valueOf();\n};\n\nmodule.exports = BinaryHeap;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/units.js":"'use strict';\n// Time units, as found in Java:\n// http://download.oracle.com/\n//   javase/6/docs/api/java/util/concurrent/TimeUnit.html\nexports.NANOSECONDS  = 1 / (1000 * 1000);\nexports.MICROSECONDS = 1 / 1000;\nexports.MILLISECONDS = 1;\nexports.SECONDS      = 1000 * exports.MILLISECONDS;\nexports.MINUTES      = 60 * exports.SECONDS;\nexports.HOURS        = 60 * exports.MINUTES;\nexports.DAYS         = 24 * exports.HOURS;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/Meter.js":"'use strict';\n\nvar units     = require('../util/units');\nvar EWMA      = require('../util/ExponentiallyMovingWeightedAverage');\nvar Stopwatch = require('../util/Stopwatch');\n\nfunction Meter(properties) {\n  properties = properties || {};\n\n  this._rateUnit     = properties.rateUnit || Meter.RATE_UNIT;\n  this._tickInterval = properties.tickInterval || Meter.TICK_INTERVAL;\n  if (properties.getTime) {\n    this._getTime = properties.getTime;\n  }\n\n  this._m1Rate     = new EWMA(units.MINUTES, this._tickInterval);\n  this._m5Rate     = new EWMA(5 * units.MINUTES, this._tickInterval);\n  this._m15Rate    = new EWMA(15 * units.MINUTES, this._tickInterval);\n  this._count      = 0;\n  this._currentSum = 0;\n  this._startTime = this._getTime();\n  this._lastToJSON = this._getTime();\n  this._interval = setInterval(this._tick.bind(this), Meter.TICK_INTERVAL);\n}\n\nMeter.RATE_UNIT     = units.SECONDS;\nMeter.TICK_INTERVAL = 5 * units.SECONDS;\n\nMeter.prototype.mark = function (n) {\n  if (!this._interval) {\n    this.start();\n  }\n\n  n = n || 1;\n\n  this._count += n;\n  this._currentSum += n;\n  this._m1Rate.update(n);\n  this._m5Rate.update(n);\n  this._m15Rate.update(n);\n};\n\nMeter.prototype.start = function () {\n  return;\n};\n\nMeter.prototype.end = function () {\n  clearInterval(this._interval);\n  this._interval = null;\n};\n\nMeter.prototype.ref = function () {\n  if (this._interval && this._interval.ref) {\n    this._interval.ref();\n  }\n};\n\nMeter.prototype.unref = function () {\n  if (this._interval && this._interval.unref) {\n    this._interval.unref();\n  }\n};\n\nMeter.prototype._tick = function () {\n  this._m1Rate.tick();\n  this._m5Rate.tick();\n  this._m15Rate.tick();\n};\n\nMeter.prototype.reset = function () {\n  this.end();\n  this.constructor();\n};\n\nMeter.prototype.meanRate = function () {\n  if (this._count === 0) {\n    return 0;\n  }\n\n  var elapsed = this._getTime() - this._startTime;\n  return this._count / elapsed * this._rateUnit;\n};\n\nMeter.prototype.currentRate = function () {\n  var currentSum  = this._currentSum;\n  var duration    = this._getTime() - this._lastToJSON;\n  var currentRate = currentSum / duration * this._rateUnit;\n\n  this._currentSum = 0;\n  this._lastToJSON = this._getTime();\n\n  // currentRate could be NaN if duration was 0, so fix that\n  return currentRate || 0;\n};\n\nMeter.prototype.toJSON = function () {\n  return {\n    'mean'         : this.meanRate(),\n    'count'        : this._count,\n    'currentRate'  : this.currentRate(),\n    '1MinuteRate'  : this._m1Rate.rate(this._rateUnit),\n    '5MinuteRate'  : this._m5Rate.rate(this._rateUnit),\n    '15MinuteRate' : this._m15Rate.rate(this._rateUnit)\n  };\n};\n\nMeter.prototype._getTime = function () {\n  if (!process.hrtime) {\n    return new Date().getTime();\n  }\n\n  var hrtime = process.hrtime();\n  return hrtime[0] * 1000 + hrtime[1] / (1000 * 1000);\n};\n\nmodule.exports = Meter;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/ExponentiallyMovingWeightedAverage.js":"'use strict';\n\nvar units = require('./units');\n\nfunction ExponentiallyMovingWeightedAverage(timePeriod, tickInterval) {\n  this._timePeriod   = timePeriod || units.MINUTE;\n  this._tickInterval = tickInterval\n    || ExponentiallyMovingWeightedAverage.TICK_INTERVAL;\n  this._alpha        = 1 - Math.exp(-this._tickInterval / this._timePeriod);\n  this._count        = 0;\n  this._rate         = 0;\n}\nExponentiallyMovingWeightedAverage.TICK_INTERVAL = 5 * units.SECONDS;\n\nExponentiallyMovingWeightedAverage.prototype.update = function (n) {\n  this._count += n;\n};\n\nExponentiallyMovingWeightedAverage.prototype.tick = function () {\n  var instantRate = this._count / this._tickInterval;\n  this._count     = 0;\n\n  this._rate += (this._alpha * (instantRate - this._rate));\n};\n\nExponentiallyMovingWeightedAverage.prototype.rate = function (timeUnit) {\n  return (this._rate || 0) * timeUnit;\n};\n\nmodule.exports = ExponentiallyMovingWeightedAverage;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/Stopwatch.js":"'use strict';\n\nvar inherits     = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction Stopwatch(options) {\n  options = options || {};\n  EventEmitter.call(this);\n\n  if (options.getTime) {\n    this._getTime = options.getTime;\n  }\n  this._start = this._getTime();\n  this._ended = false;\n}\n\ninherits(Stopwatch, EventEmitter);\n\nStopwatch.prototype.end = function () {\n  if (this._ended) {\n    return;\n  }\n\n  this._ended = true;\n  var elapsed   = this._getTime() - this._start;\n\n  this.emit('end', elapsed);\n  return elapsed;\n};\n\nStopwatch.prototype._getTime = function () {\n  if (!process.hrtime) {\n    return Date.now();\n  }\n\n  var hrtime = process.hrtime();\n  return hrtime[0] * 1000 + hrtime[1] / (1000 * 1000);\n};\n\nmodule.exports = Stopwatch;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/metrics/Timer.js":"'use strict';\n\nvar Histogram = require('./Histogram');\nvar Meter     = require('./Meter');\nvar Stopwatch = require('../util/Stopwatch');\n\nfunction Timer(properties) {\n  properties = properties || {};\n\n  this._meter     = properties.meter || new Meter();\n  this._histogram = properties.histogram || new Histogram();\n  this._getTime   = properties.getTime;\n}\n\nTimer.prototype.start = function () {\n  var self  = this;\n  var watch = new Stopwatch({getTime: this._getTime});\n\n  watch.once('end', function (elapsed) {\n    self.update(elapsed);\n  });\n\n  return watch;\n};\n\nTimer.prototype.update = function (value) {\n  this._meter.mark();\n  this._histogram.update(value);\n};\n\n\nTimer.prototype.reset = function () {\n  this._meter.reset();\n  this._histogram.reset();\n};\n\nTimer.prototype.end = function () {\n  this._meter.end();\n};\n\nTimer.prototype.ref = function () {\n  this._meter.ref();\n};\n\nTimer.prototype.unref = function () {\n  this._meter.unref();\n};\n\nTimer.prototype.toJSON = function () {\n  return {\n    meter : this._meter.toJSON(),\n    histogram : this._histogram.toJSON()\n  };\n};\n\nmodule.exports = Timer;\n","/home/travis/build/npmtest/node-npmtest-measured/node_modules/measured/lib/util/index.js":"'use strict';\n\nexports.units      = require('./units');\nexports.BinaryHeap = require('./BinaryHeap');\nexports.Stopwatch  = require('./Stopwatch');\nexports.ExponentiallyDecayingSample\n  = require('./ExponentiallyDecayingSample');\nexports.ExponentiallyMovingWeightedAverage\n  = require('./ExponentiallyMovingWeightedAverage');\n"}